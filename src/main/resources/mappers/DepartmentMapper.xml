<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- 이 XML의 구조대로 구현될 클래스의 이름 -->
<mapper namespace="DepartmentMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="department"
		type="study.spring.myschool.model.Department">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="deptno" column="deptno" />
		<result property="dname" column="dname" />
		<result property="loc" column="loc" />
	</resultMap>

	<!-- 단일행 조회(상세보기)를 위한 기능 정의 대부분의 경우 WHERE절의 조건은 PK값을 활용한다. WHERE절에 사용할 값을 
		파라미터로 전달해야 한다. MyBatis는 두 개 이상의 파라미터를 전달받지 못하기 때문에, 파라미터가 필요하면 무조건 Beans객체로 
		설정. <select id="메서드이름" parameterType="파라미터의 데이터 타입" resultMap="리턴될 Beans의 
		id"> -->
	<select id="selectDepartmentItem"
		parameterType="study.spring.myschool.model.Department"
		resultMap="department">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		select deptno, dname, loc
		from department
		where deptno=#{deptno}
	</select>

	<!-- 데이터 저장을 위한 기능 정의 <insert id="메서드이름" parameterType="파라미터의 데이터 타입" useGeneratedKeys="자동증가 
		일련번호값 리턴 여부" keyProperty="자동증가 일련번호 컬럼명"> -->
	<insert id="insertDepartmentItem"
		parameterType="study.spring.myschool.model.Department"
		useGeneratedKeys="true" keyProperty="deptno">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		INSERT into department (
		dname, loc
		) VALUES (
		#{dname}, #{loc}
		)
	</insert>

	<!-- 학과 목록 조회하기 -->
	<select id="selectDepartmentList"
		parameterType="study.spring.myschool.model.Department"
		resultMap="department">
		SELECT deptno, dname, loc FROM department
		<where>
			<if test="dname != null and dname != ''">
				dname LIKE concat('%', #{dname}, '%')
			</if>
		</where>
		order by deptno desc
		limit #{limitStart},#{listCount}
	</select>

	<!-- 데이터 삭제를 위한 기능 정의 <delete id="메서드이름" parameterType="파라미터의 데이터 타입"> -->
	<delete id="deleteDepartmentItem"
		parameterType="study.spring.myschool.model.Department">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		DELETE FROM department WHERE deptno=#{deptno}
	</delete>

	<!-- 전체 데이터 수 얻기 -->
	<select id="selectDepartmentCount"
		parameterType="study.spring.myschool.model.Department" resultType="int">
		SELECT count(deptno) FROM department
		<where>
			<if test="dname != null and dname != ''">
				dname LIKE concat('%', #{dname}, '%')
			</if>
		</where>
	</select>

	<!-- 데이터 갱신을 위한 기능 정의 <update id="메서드이름" parameterType="파라미터의 데이터 타입"> -->
	<update id="updateDepartmentItem"
		parameterType="study.spring.myschool.model.Department">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		UPDATE department SET
		dname=#{dname}, loc=#{loc}
		where deptno=#{deptno}
	</update>

	<!-- 학과 목록 조회하기 -->
	<select id="selectProfessorList"
		parameterType="study.spring.myschool.model.Department"
		resultMap="department">
		SELECT deptno, dname, loc FROM department
		order by deptno desc
	</select>

</mapper>